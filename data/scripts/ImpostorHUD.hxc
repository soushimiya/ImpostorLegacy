package impostor;

import flixel.FlxG;
import extensions.flixel.FlxTextExt;
import flixel.tweens.FlxTween;
import flixel.tweens.FlxEase;
import flixel.ui.FlxBar;
import flixel.FlxSprite;
import flixel.util.FlxStringUtil;
import flixel.math.FlxMath;

// funny psych engine shit!
class ImpostorHUD extends Script
{
    var fuckflxBar = {
        songPercent: 0.3
    };
    var ratingStuff:Array<Dynamic> = [
		['You Suck!', 0.2], //From 0% to 19%
		['Shit', 0.4], //From 20% to 39%
		['Bad', 0.5], //From 40% to 49%
		['Bruh', 0.6], //From 50% to 59%
		['FC', 0.69], //From 60% to 68%
		['FC', 0.7], //69%
		['GFC', 0.8], //From 70% to 79%
		['GFC', 0.9], //From 80% to 89%
		['SFC', 1], //From 90% to 99%
		['SFC', 1] //The value on this one isn't used actually, since Perfect is always "1"
	];

    var timeTxt:FlxTextExt;
    var timeBarBG:FlxSprite;
    var timeBar:FlxBar;

    var scoreTxt:FlxTextExt;
    var scoreTxtTween:FlxTween;

    function create()
    {
        timeTxt = new FlxTextExt((FlxG.width / 2) - 585 + 42, 23, 400, "", 32);
		timeTxt.setFormat(Paths.font("vcr"), 14, 0xFFFFFFFF, "left", FlxTextBorderStyle.OUTLINE, 0xFF000000);
		timeTxt.alpha = 0;
		timeTxt.borderSize = 1;
        timeTxt.cameras = [playstate.camHUD];
        if (Config.downscroll)
            timeTxt.y = FlxG.height - 45;

        timeBarBG = new FlxSprite().loadGraphic(Paths.image("ui/timeBar"));
		timeBarBG.x = timeTxt.x;
		timeBarBG.y = timeTxt.y + (timeTxt.height / 4);
		timeBarBG.antialiasing = false;
        timeBarBG.cameras = [playstate.camHUD];
        addGeneric(timeBarBG);

        timeBar = new FlxBar(timeBarBG.x + 4, timeBarBG.y + 4, 0, Std.int(timeBarBG.width - 8), Std.int(timeBarBG.height - 8), fuckflxBar,
        'songPercent', 0, 1);
        timeBar.createFilledBar(0xFF2e412e, 0xFF44d844);
        timeBar.numDivisions = 800; //How much lag this causes?? Should i tone it down to idk, 400 or 200?
        timeBar.alpha = 0;
        timeBar.cameras = [playstate.camHUD];
        timeTxt.x += 10;
		timeTxt.y += 4;

        addGeneric(timeBar);
		addGeneric(timeTxt);

        scoreTxt = new FlxTextExt(0, playstate.healthBar.y + 36, FlxG.width, "", 20);
		scoreTxt.setFormat(Paths.font("vcr"), 20, 0xFFFFFFFF, "center", FlxTextBorderStyle.OUTLINE, 0xFF000000);
		scoreTxt.borderSize = 1.25;
        scoreTxt.cameras = [playstate.camHUD];

        // oh i can actually do this so cool
        playstate.remove(playstate.scoreTxt);
        playstate.add(scoreTxt);
        playstate.scoreTxt = scoreTxt;

        playstate.updateScoreText = function()
        {
            var total:Float = (playstate.songStats.sickCount) + (playstate.songStats.goodCount) + (playstate.songStats.badCount) + (playstate.songStats.shitCount) + (playstate.songStats.missCount);
            doScoreBop();

            scoreTxt.text = "Score: " + playstate.songStats.score;

		    if(Config.showMisses == 1)
			    scoreTxt.text += " | Misses: " + playstate.songStats.missCount;
		    if(Config.showMisses == 2)
			    scoreTxt.text += " | Combo Breaks: " + playstate.songStats.comboBreakCount;


            var ratingName = "?";
            if (total > 0)
            {
               var ratingPercent = playstate.songStats.accuracy/100;
               ratingName = ratingStuff[ratingStuff.length-1][0]; //Uses last string
				if(ratingPercent < 1)
					for (i in 0...ratingStuff.length-1)
						if(ratingPercent < ratingStuff[i][1])
						{
							ratingName = ratingStuff[i][0];
							break;
						}
            }

		    if(Config.showAccuracy)
            {
                scoreTxt.text += " | Accuracy: ";
                if (total > 0)
                    scoreTxt.text += playstate.truncateFloat(playstate.songStats.accuracy, 2) + "% " + "[" + ratingName + "]";
                else
                    scoreTxt.text += "?";
            }
        }

        playstate.playerStrums.memberAdded.add(adjustStrumPos);
        playstate.enemyStrums.memberAdded.add(adjustStrumPos);
    }

    function doScoreBop()
    {
        if(scoreTxtTween != null)
			scoreTxtTween.cancel();

        scoreTxt.scale.set(1.075, 1.075);
		scoreTxtTween = FlxTween.tween(scoreTxt.scale, {x: 1, y: 1}, 0.2, {
			onComplete: function(twn:FlxTween) {
				scoreTxtTween = null;
			}
		});
    }

    function adjustStrumPos(strum)
    {
        if(Config.downscroll){
            strum.y = FlxG.height - 150;
        }
        else {
            strum.y = 50;
        }
    }

    var trackedDadColor:Float;
    function update(elapsed:Float)
    {
        // optimize shit
        if (trackedDadColor != dad.characterColor)
        {
            trackedDadColor = dad.characterColor;
            scoreTxt.color = trackedDadColor;
        }

        var mult:Float = FlxMath.lerp(playstate.iconP1.defualtIconScale, playstate.iconP1.iconScale, Math.exp(-elapsed * 9 * playstate.songPlaybackSpeed));
        playstate.iconP1.iconScale = mult;

        var mult:Float = FlxMath.lerp(playstate.iconP2.defualtIconScale, playstate.iconP2.iconScale, Math.exp(-elapsed * 9 * playstate.songPlaybackSpeed));
        playstate.iconP2.iconScale = mult;

        // song timing stuff
        if (!FlxG.sound.music.playing)
            return;
        var curTime:Float = Conductor.songPosition;
		if(curTime < 0) curTime = 0;
		fuckflxBar.songPercent = (curTime / FlxG.sound.music.length);
    }

    function beat(curBeat:Int)
    {
        // unoptimized lmao
        if (playstate.iconP1.tween != null)
            playstate.iconP1.tween.cancel();
        if (playstate.iconP2.tween != null)
            playstate.iconP2.tween.cancel();

        playstate.iconP1.iconScale = playstate.iconP1.defualtIconScale * 1.2;
        playstate.iconP2.iconScale = playstate.iconP2.defualtIconScale * 1.2;
    }

    function songStart()
    {
        timeTxt.text = PlayState.SONG.song.toUpperCase();

        FlxTween.tween(timeBarBG, {alpha: 1}, 0.5, {ease: FlxEase.circOut});
        FlxTween.tween(timeBar, {alpha: 1}, 0.5, {ease: FlxEase.circOut});
		FlxTween.tween(timeTxt, {alpha: 1}, 0.5, {ease: FlxEase.circOut});
    }
}